// whatsapp-ai-railway/index.js

const { default: makeWASocket, useMultiFileAuthState } = require('@adiwajshing/baileys'); const { Boom } = require('@hapi/boom'); const axios = require('axios');

async function connectToWhatsApp() { const { state, saveCreds } = await useMultiFileAuthState('session');

const sock = makeWASocket({
    auth: state,
    printQRInTerminal: true
});

sock.ev.on('creds.update', saveCreds);

sock.ev.on('connection.update', (update) => {
    const { connection, lastDisconnect } = update;
    if (connection === 'close') {
        const shouldReconnect = (lastDisconnect.error = Boom(lastDisconnect?.error))?.output?.statusCode !== DisconnectReason.loggedOut;
        console.log('Connection closed. Reconnecting:', shouldReconnect);
        if (shouldReconnect) {
            connectToWhatsApp();
        }
    } else if (connection === 'open') {
        console.log('Connected to WhatsApp');
    }
});

sock.ev.on('messages.upsert', async ({ messages, type }) => {
    if (type === 'notify') {
        const msg = messages[0];
        if (!msg.key.fromMe && msg.message?.conversation) {
            const from = msg.key.remoteJid;
            const userMessage = msg.message.conversation;

            // Call AI API (Brainshop Example)
            try {
                const res = await axios.get(`http://api.brainshop.ai/get`, {
                    params: {
                        bid: process.env.BRAINSHOP_BID,
                        key: process.env.BRAINSHOP_KEY,
                        uid: process.env.BRAINSHOP_UID,
                        msg: userMessage
                    }
                });

                const aiReply = res.data.cnt;
                await sock.sendMessage(from, { text: aiReply });
                console.log(`Replied to ${from} with: ${aiReply}`);
            } catch (err) {
                console.error('AI Error:', err);
            }
        }
    }
});

}

connectToWhatsApp();

